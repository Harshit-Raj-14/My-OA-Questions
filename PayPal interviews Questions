Paypal interview
Round 1: It started with tricky 𝐉𝐚𝐯𝐚 𝐜𝐨𝐥𝐥𝐞𝐜𝐭𝐢𝐨𝐧𝐬 𝐪𝐮𝐞𝐬𝐭𝐢𝐨𝐧𝐬, 𝐢𝐧𝐜𝐥𝐮𝐝𝐢𝐧𝐠 𝐭𝐡𝐞 𝐢𝐧𝐭𝐞𝐫𝐧𝐚𝐥 𝐰𝐨𝐫𝐤𝐢𝐧𝐠 𝐨𝐟 𝐇𝐚𝐬𝐡𝐌𝐚𝐩 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐬𝐭𝐫𝐮𝐜𝐭𝐮𝐫𝐞 𝐨𝐟 𝐉𝐖𝐓 𝐭𝐨𝐤𝐞𝐧𝐬. 
We then moved to DSA, where the first question was to code 𝐌𝐞𝐫𝐠𝐞 𝐒𝐨𝐫𝐭, followed by the 𝐀𝐠𝐠𝐫𝐞𝐬𝐬𝐢𝐯𝐞 𝐂𝐨𝐰𝐬 problem.

Round 2: It started with a deep dive into my college project, focusing on the REST APIs I developed and the associated database schema. 
We then discussed the HLD and LLD of my current project, where I shared my screen to present my design, which was well-received. 
The interviewer then asked me to write a 𝐬𝐢𝐧𝐠𝐥𝐞𝐭𝐨𝐧 𝐜𝐥𝐚𝐬𝐬 𝐚𝐧𝐝 𝐟𝐮𝐫𝐭𝐡𝐞𝐫 𝐝𝐢𝐬𝐜𝐮𝐬𝐬 𝐡𝐨𝐰 𝐭𝐨 𝐦𝐚𝐤𝐞 𝐢𝐭 𝐭𝐡𝐫𝐞𝐚𝐝-𝐬𝐚𝐟𝐞, which i had already prepared using (https://www.youtube.com/watch?v=2Dw1v9QC408), thanks to Riddhi Dutta for such an awesome explanation. We transitioned to DSA.
The first DSA question was to 𝐬𝐰𝐚𝐩 𝐭𝐰𝐨 𝐧𝐮𝐦𝐛𝐞𝐫𝐬 𝐰𝐢𝐭𝐡𝐨𝐮𝐭 𝐮𝐬𝐢𝐧𝐠 𝐚 𝐭𝐡𝐢𝐫𝐝 𝐯𝐚𝐫𝐢𝐚𝐛𝐥𝐞, followed by a more advanced question: 𝐌𝐢𝐧𝐢𝐦𝐮𝐦 𝐭𝐢𝐦𝐞 𝐫𝐞𝐪𝐮𝐢𝐫𝐞𝐝 𝐭𝐨 𝐢𝐧𝐟𝐞𝐜𝐭 𝐚𝐥𝐥 𝐧𝐨𝐝𝐞𝐬 𝐨𝐟 𝐚 𝐛𝐢𝐧𝐚𝐫𝐲 𝐭𝐫𝐞𝐞 (https://www.geeksforgeeks.org/minimum-time-required-to-infect-all-the-nodes-of-binary-tree/), 
which is very similar to this question :- https://www.youtube.com/watch?v=2r5wLmQfD6g&list=PLkjdNRgDmcc0Pom5erUBU4ZayeU9AyRRu&index=32 



LEETCODE
https://leetcode.com/problems/wildcard-matching/description/
https://leetcode.com/problems/reverse-pairs/description/
https://leetcode.com/problems/lexicographically-smallest-palindrome/description/
https://leetcode.com/problems/number-of-substrings-containing-all-three-characters/description/
https://leetcode.com/problems/valid-palindrome-ii/description/
https://leetcode.com/problems/find-all-anagrams-in-a-string/description/
https://leetcode.com/problems/find-unique-binary-string/description/

https://takeuforward.org/data-structure/find-k-th-permutation-sequence/





/*******************************************************************************************/
Given a binary string, identify and print all unique two-digit binary numbers(Unique, Non Zero) that can be formed by scanning the string in a single direction.
// Example 1:
// Input: "001100011"
// Output: "01 11 10"
00 wont be part of answer since its value is 0
// Example 2:
// Input: "1111"
// Output: "11"

/* CODE O(n) */
public static List<String> checkSubstrings(String s) {
    List<String> res = new ArrayList<>();
    if (s.contains("11")) res.add("11");
    if (s.contains("10")) res.add("10");
    if (s.contains("01")) res.add("01");
    return res;
}


/************************************************************************************************/
In java you have two MAX_VALUE given in Integer:
int a = Integer.MAX_VALUE;
int b = Integer.MAX_VALUE;
Find the average of a and b without using long data type and ensuring the answer remains within the int range.

/* CODE */
static int computeAverage(int a, int b) {
    return (a + (b-a)/2);
}
// Output is 2147483647
/*
LOGIC---
The value of Integer.MAX_VALUE = 2147483647. Now what will happen if we increment it with value 1. The answer is surprisingly -2147483648, which is also the value of Integer.MIN_VALUE.
So basically Integer.MAX_VALUE + 1 = Integer.MIN_VALUE
This is called overflow in java.

https://leetcode.com/discuss/interview-question/4882159/Paypal-Interview-Question%3A-DS-Round

What is twos complement?
Two’s complement is a way of representing negative numbers in binary. Java uses this system to store negative numbers.
The way it is done is, you flip all the bits and add one to it. So twos compliment of 0000 0001 is
1111 1110 + 1 =1111 1111

if you take any positive 32 bit integer, flip the bits and add 1, you will get the binary representation of its negative value.
This can be verified in java through below code.
// gives you binary representation of -1
System.out.println(Integer.toBinaryString(-1));
//This will print 11111111111111111111111111111111

/* WRONG ANSWER */
int a = Integer.MAX_VALUE;
int b = Integer.MAX_VALUE;
static int computeAverage(int a, int b) {
    return (((a+b)/2));
}
// Output is -1
// Expected: 2147483647

/* WRONG ANSWER */
static int computeAverage(int a, int b) {
    return ((a/2) + (b/2));
}
// Output is 2147483646
// Expected: 2147483647
Reason: Integer.MAX_VALUE is an odd number, dividing by 2 will return floor value

/* CORRECT SOLUTION BY HANDLING ODD CASE */
static int compute_average(int a, int b) {
    return (a / 2) + (b/2) + ((a % 2 + b % 2) / 2);    //addign 1 as ciel value when sum of a and b is odd
}
// Output is 2147483647
// Expected: 2147483647


*/
