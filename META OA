PS- AMAZON / META OA
 The inputs are a string, integer x and integer y.
=> string is made up of 0, 1 and !, each ! can be either 0 or 1
=> Every subsequence of 01 in the string can produce error x
=> Every subsequence of 10 in the string can produce error y
error = (count of subsequence "01")*x + (count of subsequence "10")*y
Return the minimum error count modulo 10^9.
Constraints : 0<=len(string)<=50000, 0<=x<=50000, 0<=y<=50000

Example:
string=01!!, x=2, y=3, there're 4 cases:
    0100 => errorCount is 2*1 + 3*2 = 8
    0101 => errorCount is 2*3+3*1 = 9
    0110 => errorCount is 2*2+2*3=10
    0111 => errorCount is 2*3=6
so the result is 6

Example 2:
string=!!!!, x=2, y=5
we can replace all ! to 0 or 1, so there will be no 01 or 10 in the string, the result is 0. 

/* CODE */

/*
LOGIC---
 Suppose there are two ! characters between which there are A 0s and B 1s in some order:
! [A(0), B(1)] !
A couple of observations:
Whether we assign the two ! characters as 01 or 10, the number of subsequences of each type that includes characters outside this range does not change
So let us compare the costs within this substring involving the two ! characters on assigning them as 01 or 10
=> 0 [A(0), B(1)] 1 incurs a cost of (A + B + 1) x within the substring due to the assigned characters
=> 1 [A(0), B(1)] 0 incurs a cost of (A + B + 1) y within the substring due to the assigned characters
Note : We are only counting subsequence involving the first and last character that we assigned, because the rest don't depend on our choice 
Which of the assignments is better depends only on whether x > y, not the number of 0s and 1s in the substring.
Therefore it is better to greedily bubble all the 1s among the ! assignments to the beginning or the end depending on whether x < y. This gives us the greedy algorithm. 
*/
