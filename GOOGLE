Why should we hire you?
This si actualy not my first time interviewing at google. I gav eonce before and at tha ttime I remebr in first itnerview I did not even understood the rpbolem and by end of it. i came up with a dnaky brute force but there wa snot evne time lef tto code.
I might did well in secodn and got to third but i idd not make the cutr.
But id din't say to myself that maybe i ma not just good enough. i have consistnetly worked hard each day to make myself capable to get one more chanc eto interivew this.
I have multiple offers waiitng for me, and my parnets dont even know. My friends and teachers telling me take this and go home and you cna try later.
And I think and so to myself that I am not done yet. I deserve better i can do better. And after that failure I haven't have a peaceful night.
And if you hire me you will not be hiring a random guy who solved one ranadom leetcode dsa problem. you will be hiring someone who did not give up and has worked hard to stand strong and try again and I promise you I am going to crack this interview and get this job no matter what.

To sum it up, I have the experience and capacity to do anything I have set my mind to and i beleive I cna immensely contriburt ena dwork witht he tema to acheive something better.


OA
https://leetcode.com/discuss/interview-question/352460/Google-Online-Assessment-Questions
Largest Subarray Length K, Compare Strings
https://github.com/IS5882/ProblemSolving_Python
https://medium.com/@ahmii.shaikh18_19732/robot-coin-collection-dynamic-programming-dadb07e35496
https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/




PHONE CALL
Look up time for radix sort
Time Complexity of Heap Sort
Look up time for radix sort
Which sorting techniques doesn't have logn worst case time complexity
Difference between merge sort and heap sort


INTERVIEW
A topological sort problem with an alternative solution using color coding
A problem involving Square Root Decomposition. Difficult: Hard
https://leetcode.com/discuss/interview-question/4739123/Google-L4-VO-coding-question/

















INTERVIEW
/**********************************************************************************************************************************/
PS
Question 1:
You are given an array of length n and q queries. Each query consists of two indices [l, r], representing a subarray from index l to r (both inclusive). 
For each query, we are allowed to subtract 1 from any subsequence within the range [l, r]. 
After processing all the queries, determine whether it's possible to make all elements of the array equal to zero.
Example:
arr = [1, 2, 3]
queries = [[0, 1], [1, 2], [0, 2], [1, 2]]
Output: true

Explanation:
query --> arr -- subsequence
[0, 1] --> [0, 1, 3] -- {1, 2}
[1, 2] --> [0, 0, 2] -- {1 , 3}
[0, 2] --> [0, 0, 1] -- {2}
[1, 2] --> [0, 0, 0] -- {1}

SOLUTION:
According to me , the 1st problem can be done using difference array technique.
for each query (l,r), we can do A[l]-=1, A[r+1]+=1, then we can obtain the prefix sum after computing all the queries.
Now if all element are <=0 , then the answer will be true, else false.
Reason why we have included lesser than zero is because its not mandatory to subtract -1 from every element btwn l and r (we can take any subsequence), hence at some point of time, it must have been reduced to zero.
Also if negative elements are present already , then the answer will be false only, so we can check that before.


/**********************************************************************************************************************************/
PS
You are given a class Block in Java that represents the time a person is busy, with attributes personId, startTime, and endTime. 
Additionally, you're given an integer totalTime that represents the total duration. 
Write a function to find the time intervals when all persons are free. How would you approach this problem in Java?

/* CODE */
class Block {
    int personId;
    int startTime;
    int endTime;

    Block(int personId, int startTime, int endTime) {
        this.personId = personId;
        this.startTime = startTime;
        this.endTime = endTime;
    }
}

public class FreeTimeFinder {
    public static List<int[]> findFreeIntervals(List<Block> blocks, int totalTime) {
        // Step 1: Sort the blocks by start time
        blocks.sort(Comparator.comparingInt(b -> b.startTime));
        // Step 2: Merge overlapping intervals
        List<int[]> mergedBusyIntervals = new ArrayList<>();
        int[] current = new int[] { blocks.get(0).startTime, blocks.get(0).endTime };
        for (int i = 1; i < blocks.size(); i++) {
            Block block = blocks.get(i);
            if (block.startTime<=current[1]) current[1] = Math.max(current[1], block.endTime); // Overlapping interval, merge it
            else{ // No overlap, add the previous interval and start a new one
                mergedBusyIntervals.add(current);
                current = new int[] { block.startTime, block.endTime };
            }
        }
        mergedBusyIntervals.add(current); // Add the last interval
        // Step 3: Find free intervals
        List<int[]> freeIntervals = new ArrayList<>();
        int prevEnd = 0;
        for (int[] busy : mergedBusyIntervals) {
            if (prevEnd < busy[0]) freeIntervals.add(new int[] { prevEnd, busy[0] });
            prevEnd = busy[1];
        }
        // Handle free time after the last busy interval till totalTime
        if (prevEnd < totalTime) freeIntervals.add(new int[] { prevEnd, totalTime });
        return freeIntervals;
    }
}

/*
Approach:
Merge Intervals: First, gather all the busy intervals, sort them by startTime, and merge overlapping or adjacent intervals to get the combined busy time for everyone.
Find Free Intervals: Once the busy intervals are merged, the free intervals are simply the gaps between the merged busy intervals.
*/
