In React, components are the building blocks of UI. Let's break down the key differences between Functional and Class Components:

👉 Functional Components:

✨ Plain JavaScript functions.
✨ Accept props as arguments and return JSX.
✨ No render() method used.
✨ Also known as Stateless components.
✨ Run from top to bottom and can't be kept alive after returning.

👉 Class Components:

✨ Require extending from React.Component.
✨ Have a render() method returning JSX.
✨ Also known as Stateful components.
✨ Utilize lifecycle methods like componentDidMount.
✨ Instantiated and can keep different lifecycle methods alive.


⚡️ Using Hooks ⚡️

Functional components support Hooks, which enable stateful logic. Example:

const [name, setName] = React.useState('');


🚧 Syntax Variation 🚧

Functional Component syntax is straightforward.
Class Component syntax includes a constructor for state management.

🌟 React offers flexibility with these two types of components, each serving its purpose depending on the specific requirements of your application! 🌟





### callback function
const notifyCustomer = () => {
  console.log("Calling customer");
};

const order = (item, callback) => {
  console.log(`Preparing your ${item}`);
  setTimeout(() => {
    console.log(`Your ${item} is prepared`);
    callback();
  }, 2000);
};

order("Burger", notifyCustomer);

Output:
Preparing your Burger 
[after 2 s]
Your Burger is prepared
Calling customer


### Synchronous
console.log("Opens Instagram");
console.log("Reel uploaded");
console.log("Opens reels");

Output:
Opens Instagram
Reel uploaded
Opens reels


### Asynchronous
console.log("Opens Instagram");
function f1() {
  console.log("Reel uploaded");
}
setTimeout(f1, 2000);
console.log("Opens reels");

Output:
Opens Instagram
Opens reels
Reel uploaded -> this statment wes given as a thread to be processed later so that user can see reels first and not wait
