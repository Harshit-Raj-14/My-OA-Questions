React (aka React.js or ReactJS) is an open-source front-end JavaScript library


The major features of React are:
    Uses JSX syntax, a syntax extension of JS that allows developers to write HTML in their JS code.
    It uses Virtual DOM instead of Real DOM considering that Real DOM manipulations are expensive.
    Supports server-side rendering which is useful for Search Engine Optimizations(SEO).
    Follows Unidirectional or one-way data flow or data binding.
    Uses reusable/composable UI components to develop the view.
Virtual DOM: React uses a virtual DOM to efficiently update and render components, ensuring fast performance by minimizing direct DOM manipulations.
Component-Based Architecture: React builds UI using reusable, isolated components, making code more modular, maintainable, and scalable.
Hooks: React hooks allow functional components to manage state and side effects, making them powerful and more flexible.


JSX stands for JavaScript XML and it is an XML-like syntax extension to ECMAScript.  => Javascript+html => html written inside javascript
its stricter than html


The five main building blocks of React are:
    Components: These are reusable blocks of code that return HTML.
    JSX: It stands for JavaScript and XML and allows you to write HTML in React.
    Props and State: props are like function parameters and State is similar to variables.
    Context: This allows data to be passed through components as props in a hierarchy.
    Virtual DOM: It is a lightweight copy of the actual DOM which makes DOM manipulation easier.


Props are used to pass data from one component to another, usually from a parent component to a child component. 
The state is local data storage that is local to the component only and cannot be passed to other components.
State is used to manage data within a component. The component can update its state, and React will re-render the component when the state changes.

Here is the difference table of props and state In react
PROPS || STATE
The Data is passed from one component to another.	|| The Data is passed within the component only.
It is Immutable (cannot be modified).	|| It is Mutable ( can be modified).
Props can be used with state and functional components.	|| The state can be used only with the state components/class component (Before 16.0).
Props are read-only. || The state is both read and write.

EXAMPLE Props---
// Parent Component
import React from 'react';
import Greeting from './Greeting';
function App() {
  return (
    <div>
      <Greeting name="Alice" />
    </div>
  );
}
export default App;

// Child Component (Greeting.js)
import React from 'react';
function Greeting(props) {
  return <h1>Hello, {props.name}!</h1>;
}
export default Greeting;

In this example, the parent component App passes the prop name with the value "Alice" to the child component Greeting, which displays the message "Hello, Alice!".


EXAMPLE state---
// Counter Component with State
import React, { useState } from 'react';
function Counter() {
  // Declare a state variable 'count' and a function 'setCount' to update it
  const [count, setCount] = useState(0);
  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}
export default Counter;

Here, useState is used to manage the count state variable. When the button is clicked, the setCount function updates the count, causing the component to re-render and display the updated count value.


A Component is one of the core building blocks of React. In other words, we can say that every application you will develop in React will be made up of pieces called components. 
Components make the task of building UIs much easier. 

In React, we mainly have two types of components: 
Functional Components: Functional components are simply javascript functions. We can create a functional component in React by writing a javascript function. 
Class Components: The class components are a little more complex than the functional components. 
The functional components are not aware of the other components in your program whereas the class components can work with each other. We can pass data from one class component to another class component.


In React, components are the building blocks of UI. Let's break down the key differences between Functional and Class Components:
👉 Functional Components:
✨ Plain JavaScript functions.
✨ Accept props as arguments and return JSX.
✨ No render() method used.
✨ Also known as Stateless components.
✨ Run from top to bottom and can't be kept alive after returning.

👉 Class Components:
✨ Require extending from React.Component.
✨ Have a render() method returning JSX.
✨ Also known as Stateful components.
✨ Utilize lifecycle methods like componentDidMount.
✨ Instantiated and can keep different lifecycle methods alive.


⚡️ Using Hooks ⚡️
Functional components support Hooks, which enable stateful logic. Example:
const [name, setName] = React.useState('');


🚧 Syntax Variation 🚧
Functional Component syntax is straightforward.
Class Component syntax includes a constructor for state management.
🌟 React offers flexibility with these two types of components, each serving its purpose depending on the specific requirements of your application! 🌟


How do browsers read JSX?
In general, browsers are not capable of reading JSX and only can read pure JavaScript. 
The web browsers read JSX with the help of a transpiler. Transpilers are used to convert JSX into JavaScript. The transpiler used is called Babel


Explain the lifecycle methods of components
A React Component can go through four stages of its life as follows. 
    Initialization: This is the stage where the component is constructed with the given Props and default state. This is done in the constructor of a Component Class.
    Mounting: Mounting is the stage of rendering the JSX returned by the render method itself.
    Updating: Updating is the stage when the state of a component is updated and the application is repainted.
    Unmounting: As the name suggests Unmounting is the final step of the component lifecycle where the component is removed from the page.


Higher-order components or HOC is the advanced method of reusing the component functionality logic. It simply takes the original component and returns the enhanced component.
Syntax:
const EnhancedComponent = higherOrderComponent(OriginalComponent);


### callback function
const notifyCustomer = () => {
  console.log("Calling customer");
};

const order = (item, callback) => {
  console.log(`Preparing your ${item}`);
  setTimeout(() => {
    console.log(`Your ${item} is prepared`);
    callback();
  }, 2000);
};

order("Burger", notifyCustomer);

Output:
Preparing your Burger 
[after 2 s]
Your Burger is prepared
Calling customer


### Synchronous
console.log("Opens Instagram");
console.log("Reel uploaded");
console.log("Opens reels");

Output:
Opens Instagram
Reel uploaded
Opens reels


### Asynchronous
console.log("Opens Instagram");
function f1() {
  console.log("Reel uploaded");
}
setTimeout(f1, 2000);
console.log("Opens reels");

Output:
Opens Instagram
Opens reels
Reel uploaded -> this statment wes given as a thread to be processed later so that user can see reels first and not wait
