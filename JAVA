Differnece between abstraction and encapsulation?
Encapsulation hides variables or some implementation that may be changed so often in a class to prevent outsiders access it directly. They must access it via getter and setter methods.

Abstraction is used to hide something too, but in a higher degree (class, interface). Clients who use an abstract class (or interface) do not care about what it was, they just need to know what it can do.


PayPal java questions
What is immutable in java ?? How to make a class as immutable ??
Write code for thread safe singleton class .
What is the use case of optional class.
Write a class and show all OOPS principles ??
How to make a functional interface.
𝐢𝐧𝐭𝐞𝐫𝐧𝐚𝐥 𝐰𝐨𝐫𝐤𝐢𝐧𝐠 𝐨𝐟 𝐇𝐚𝐬𝐡𝐌𝐚𝐩 𝐚𝐧𝐝 𝐭𝐡𝐞 𝐬𝐭𝐫𝐮𝐜𝐭𝐮𝐫𝐞 𝐨𝐟 𝐉𝐖𝐓 𝐭𝐨𝐤𝐞𝐧𝐬.
write a 𝐬𝐢𝐧𝐠𝐥𝐞𝐭𝐨𝐧 𝐜𝐥𝐚𝐬𝐬 𝐚𝐧𝐝 𝐟𝐮𝐫𝐭𝐡𝐞𝐫 𝐝𝐢𝐬𝐜𝐮𝐬𝐬 𝐡𝐨𝐰 𝐭𝐨 𝐦𝐚𝐤𝐞 𝐢𝐭 𝐭𝐡𝐫𝐞𝐚𝐝-𝐬𝐚𝐟𝐞, (Ridhi Dutta video)
Comparator vs. Comparable, Semaphore vs. Mutex, Reentrant locks, How to overcome deadlock using locks, Indexes and their in-depth functionality
We then transitioned into a detailed discussion on Kafka, covering areas like consumers, producers, topics, partitions, and its use cases. This segment involved several real-time problem-solving scenarios, such as:
Designing a system to process 15 trillion messages in real time
Diagnosing and addressing message delays of 3ms: possible reasons, recovery steps, and alerting measures to ensure customers remain unaffected.
Scaling strategies when the number of brokers is fixed.
Handling scenarios where, after a Kafka upgrade, services fail to connect. Questions included identifying potential issues, detecting such failures, and rolling back.

https://medium.com/paypal-tech/scaling-kafka-to-support-paypals-data-growth-a0b4da420fab#:~:text=Kafka%20at%20PayPal&text=Today%2C%20our%20Kafka%20fleet%20consists,any%20impact%20to%20our%20business
https://tech.phonepe.com/the-kafka-edge-managing-100-billion-daily-events-at-phonepe/
https://www.confluent.io/events/kafka-summit-americas-2021/how-did-we-move-the-mountain-migrating-1-trillion-messages-per-day-across/
https://blog.bytebytego.com/p/cloudflares-trillion-message-kafka


Top Tricky Java questions


1. Why Java is not 100% Object-oriented
2. Why pointers are not used in Java
3. What is JIT compiler in Java
4. Why String is immutable in java
5. What is a marker interface

6. Can you override a private or static method in Java
7. Does “finally” always execute in Java
8. How Can You Make a Class Immutable
9. What is singleton class in Java and how can we make a class singleton?
10. How to break a Singleton pattern

11. Does Java support multiple inheritances
12. Can you access a non-static variable in the static context
13. is it possible to load a class by two ClassLoader
14. Can you explain how “Inheritance” and “Composition” are different
15. What is the best candidate for the HashMap Key

16. Can we use a default constructor of a class even if an explicit constructor is defined
17. If two threads have same priority which thread will be executed first
18. Can we serialize static variables in java
19. What is a deadlock in Java, and how can you create one programmatically
20. Will the ‘finally’ block execute if you put the return statement or System. exit () on the ‘try‘ or ‘catch‘ block?



Java Interview Questions:
1. What is Exception?
2. Types of Exceptions?
3. Examples of checked and unchecked exceptions with proper explanations.
4. What is the parent class of Exception?
5. Is there an ultimate parent class of Throwable?
6. try-catch-finally block—when does finally not execute?
7. Default size of HashMap and its fill ratio?
8. Internal implementation of HashMap in Java?
9. Stream API questions: map and filter concepts.

Design Pattern Questions: 
1. SOLID Principles 
2. Factory Design

Some more about core java and JDBC as well.

Theoretical questions were followed by practical code snippets to evaluate how well I understood core concepts:

🔹 String SCP (String Constant Pool): Exploring immutability and how strings are stored in the SCP.
🔹 Dynamic Dispatch: Parent class reference holding a child class object, with overriding methods.
🔹 Best Matching Object Pattern: Overloaded methods with a parent and child class object, determining which method gets called when passing null.

Spring Boot Interview Questions:
1. Spring vs. Spring Boot: Why the shift towards Spring Boot?
2. RestController vs. Controller—differences and use cases.
3. A situation-based question: Which controller is most suitable?
4. Spring MVC properties names.
5. ORM tools: Hibernate and JPA.
6. How to call third-party APIs in Spring Boot?
7. Stereotype annotations in Spring Boot.
8. About Spring boot starters 
9. Spring profile annotation
and some more...



explain your framework to me. 🫠 👇

We are using a maven Project to manage all dependencies which our project requires and using testNg as framework. Along with testNg framework we are using Data Driven Approach using TestNg @DataProvider annotation so we can run our tests multiple times with different Data.

Folder 1 (src/test/java) 📁
We have src/test/java folder where we have one package named testcases and we are maintaining all our test case files (java files). Ex : LoginTest.java
We are using @Test Annotation for tests.

Folder 2 (src/test/resources) 📁
Inside src/test/resources we have one package with name utilities where we maintained our data.properties file containing url and username and password data. Our excel files are also present inside this utilities package.

Folder 3 (src/main/resources) 📁

👉 In this folder we have one package named pageobjects where we stored all our locators for each webpage of our application.

👉 In this folder we have one package with name baseTest inside this we have our base.java file from where we invoke our browsers, we are using the concept of ThreadLocal class for thread safety so we can run tests in parallel, also we are extending this base class in every tests. Also we are loading our properties file inside base class. Also we are using @BeforeSuite (for launching browsers ) and @AfterSuite (for closing browser)

👉 In this Folder we have the listener
package too, inside that we have Listeners.java class that implements ITestListener interface so we can control flow of execution like taking screenshots for failed test case and attaching them with extent reports.

extent reports we are using. We kept extent.properties file in src/test/resources folder 📁 

testng.xml: This file we have maintained to run multiple tests also this file is properly configured in our pom.xml file so we can easily run our testng.xml from maven command. Note : Memorize how testng.xml file looks sometimes interviewer can ask you to write sample testng.xml file on notepad.

Our Project is configured in jenkins we have provided our pom.xml path in jenkins and using mvn clean test command to run our test cases.

github: we are maintaining all code in github. 🧑‍💻

