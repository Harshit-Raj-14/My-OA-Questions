Ist round:
What is the differnece between c, c++, java
why doesnt java have pointers
explain method overloading
four principles of OOPs.

DSA :
Two sum problem -> brute force, hashing, using binary search, using two pointer
(basically the second array looping to be done using binary or two pointer after sorting the array)

What is kubernetes
What is docker image
What is CV's in kubernetes
What is microservices


SECOND ROUND------------------------
DSA---
Problem : If you have 10 sorted arrays, how you will make one single sorted array. -> https://www.geeksforgeeks.org/merge-k-sorted-arrays/
Problem : If you have a very big array, find out the 1000 largest numbers.
What is CVE's in kubernetes

What is LRU cahce
Problem : Write full implementation of LRU cache. - https://leetcode.com/problems/lru-cache/

https://leetcode.com/problems/reverse-words-in-a-string/description/



THIRD ROUND--------------------------------------------
DSA--
Porblem - pow(x,n) - https://leetcode.com/problems/powx-n/

SQL ->
you have a table student - > with columns name, subject, marks. 
There can be multiple subjects along with their marks. Find how many students names who have total marks in all subject more than 500. 
SELECT name, SUM(marks) as total_marks
FROM student
GROUP BY name
HAVING total_marks > 500;



IPV 4 vs IPV 6
Computers on the internet talk to each other through IP addresses, so understanding IP address is important. 
IP addresses are of two types: IPv4 and IPv6. IPv4 addresses are 32-bit addresses having four octets with numbers 0 to 255, providing more than 4 billion IP addresses. 
However, 4 billion IPs are still not enough for the 8 billion people living on planet Earth. Therefore, IPv6 was invented. 
IPv6 addresses are 128-bit addresses that provide around 340 undecillion IP addresses and come with additional features.


PRINT 1 TO 100 WITHOUT LOOP
import java.util.*;
public class PrintNumbersWithOutLoop {
    static void printNumbers(int number){
        if(number<=0) return;  //base case
        //else make a recursive call
        printNumbers(number-1);
        //print number in tail recursive
        System.out.print(number + " ");
    }

    public static void main(String[] args) {
        int n = 100;
        printNumbers(n);
    }
}



PROBLEM : 1 to N without loop
/* RECURSION */
public class Solution {
    static int[] recurs(int n, int[] arr){
        if(n<=0) return arr;
        int i=n-1;
        arr[i]=n;
        return recurs(n-1, arr);
    }

    public static int[] printNos(int x) {
        int[] arr = new int[x];
        return recurs(x, arr);
    }
}

/*
TC: O( n )
SC: O( n )
*/










