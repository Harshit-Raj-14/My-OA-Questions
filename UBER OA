PS-
Given an empty array that should contain integers numbers, your task is to process a list of queries on it. 
Specifically, there are two types of queries: "+x" - append x to numbers numbers may contain multiple instances of the same integer. "-x" - remove all the instances of x from numbers. 
After processing each query, count the number of triples (x, y, z) in numbers which meet this condition: both x - y and y z are equal to a given diff. 
Note that elements in numbers can be rearranged to form triples to meet the condition.

/* CODE */
public class TripleCounter {
    public static int[] solution(String[] queries, int diff) {
        List<Integer> numbers = new ArrayList<>();
        Map<Integer, Integer> countMap = new HashMap<>();
        List<Integer> result = new ArrayList<>();
        for (String query : queries) {
            if (query.startsWith("+")) {
                int x = Integer.parseInt(query.substring(1));
                numbers.add(x);
                countMap.put(x, countMap.getOrDefault(x, 0) + 1);
            } else if (query.startsWith("-")) {
                int x = Integer.parseInt(query.substring(1));
                numbers.removeIf(n -> n == x);
                countMap.remove(x);
            }
            // Count triples
            int tripleCount = 0;
            for (int y : countMap.keySet()) {
                int x = y + diff;
                int z = y - diff;
                if (countMap.containsKey(x) && countMap.containsKey(z)) {
                    tripleCount += countMap.get(x) * countMap.get(y) * countMap.get(z);
                }
            }
            result.add(tripleCount);
        }
        // Convert result list to array
        return result.stream().mapToInt(i -> i).toArray();
    }

    public static void main(String[] args) {
        String[] queries = {"+4", "+5", "+6", "+4", "+3", "-4"};
        int diff = 1;
        int[] output = solution(queries, diff);
        System.out.println(Arrays.toString(output)); // Output: [0, 0, 1, 2, 4, 0]
    }
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PS- Number of Ways => https://www.hackerrank.com/contests/codeagon/challenges/number-of-ways-1/problem
You are given three strings p, q and r. From the strings p and q, you can create all possible strings equal to r such that contains atleast one character from both the strings, 
and the order of all the selected characters in individual strings is preserved.

/* WRONG SOLUTION */
import java.util.*;
public class Solution{
    static int m=1000000007;
    static int summingstring(String p, String q, String r){
        int n=p.length();
        int m=q.length();
        int k=r.length();
        int dp[][][]=new int[n + 1][m + 1][k + 1];
        for (int[][] layer : dp){
            for (int[] row : layer){
                Arrays.fill(row, -1);
            }
        }  
        return solve(p, q, r, 0, 0, 0, dp);
    }
    
    static int solve(String p, String q, String r, int i, int j, int k, int dp[][][]){
        if (k == r.length()) return 1; // If we've matched the whole string r
        if (dp[i][j][k] != -1) return dp[i][j][k]; 
        int count=0;
        // Try matching characters from string p
        for (int idx=i; idx<p.length(); idx++){
            if (p.charAt(idx) == r.charAt(k)){
                count=(count + solve(p, q, r, idx+1, j, k+1, dp)) % m;
            }
        }
        // Try matching characters from string q
        for (int idx=j; idx<q.length(); idx++){
            if (q.charAt(idx) == r.charAt(k)){
                count=(count + solve(p, q, r, i, idx+1, k+1, dp)) % m;
            }
        }
        return dp[i][j][k]=count;
    }

    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        String p=sc.next();
        String q=sc.next();
        String r=sc.next();
        int result=summingstring(p, q, r);
        System.out.println(result);
    }
}


/* PARTIALLY ACCEPTED CODE */
import java.util.Scanner;
public class Main {
    static long MOD = 1000000007L;
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String a = sc.next();
        String b = sc.next();
        String c = sc.next();
        int n = a.length();
        int m = b.length();
        int k = c.length();
        // 1-indexing by adding a dummy character at the start
        a = "*" + a;
        b = "*" + b;
        c = "*" + c;
        // Dynamic allocation of dp array based on the lengths of a, b, and c
        long[][][] dp = new long[n + 1][m + 1][k + 1];
        dp[0][0][0] = 1;
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                for (int len = 0; len < k; len++) {
                    if (dp[i][j][len] != 0) {
                        for (int ni = i + 1; ni <= n; ni++) {
                            if (a.charAt(ni) == c.charAt(len + 1)) {
                                dp[ni][j][len + 1] = (dp[ni][j][len + 1] + dp[i][j][len]) % MOD;
                            }
                        }
                        for (int nj = j + 1; nj <= m; nj++) {
                            if (b.charAt(nj) == c.charAt(len + 1)) {
                                dp[i][nj][len + 1] = (dp[i][nj][len + 1] + dp[i][j][len]) % MOD;
                            }
                        }
                    }
                }
            }
        }
        long ans = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                ans = (ans + dp[i][j][k]) % MOD;
            }
        }
        System.out.println(ans);
    }
}

/* FULLY ACCEPTED CODE */
//O(n^3) dp in O(n^2) memory
#include <iostream>
#include <algorithm>
#include <cassert>
using namespace std;

#define assert_range(x,a,b) assert((a) <= (x) and (x) <= (b))
using ll = long long;
const int A = 300;
const int B = 300;
const int C = 300;
const int MOD = 1e9+7;

void assert_string(const string& s) {
    for (auto x : s) {
        assert_range(x, 'a', 'z');
    }
}

ll f[2][A+10][B+10]; // f[i][j][k] := number of ways to build C[1..i] from A[1..j] and B[1..k] such that A[j] and B[k] are the last taken letters in A and B respectively
ll sumfa[2][A+10][B+10]; // sumfa[i][j][k] := sum over f[i][x][k] for 0 <= x <= j
ll sumfb[2][A+10][B+10]; // sumfb[i][j][k] := sum over f[i][j][x] for 0 <= x <= k

int main() {
    ios_base::sync_with_stdio(0);
    string a, b, c;
    cin >> a >> b >> c;
    assert_string(a);
    assert_string(b);
    assert_string(c);

    int sa = a.size();
    int sb = b.size();
    int sc = c.size();
    assert_range(sa, 1, A);
    assert_range(sb, 1, B);
    assert_range(sc, 1, C);


    f[0][0][0] = 1;
    for (int j = 0; j <= sa; ++j) {
        sumfa[0][j][0] = 1;
    }
    for (int k = 0; k <= sb; ++k) {
        sumfb[0][0][k] = 1;
    }
    int cur = 1;
    for (int i = 1; i <= sc; ++i, cur=1-cur) {
        for (int j = 0; j <= sa; ++j) {
            for (int k = 0; k <= sb; ++k) {
                f[cur][j][k] = 0;
                if (j > 0 and c[i-1] == a[j-1]) {
                    f[cur][j][k] += sumfa[1-cur][j-1][k];
                }
                if (k > 0 and c[i-1] == b[k-1]) {
                    f[cur][j][k] += sumfb[1-cur][j][k-1];
                }
                f[cur][j][k] %= MOD;
            }
        }
        for (int j = 0; j <= sa; ++j) {
            for (int k = 0; k <= sb; ++k) {
                sumfa[cur][j][k] = f[cur][j][k];
                sumfb[cur][j][k] = f[cur][j][k];
                if (j > 0) {
                    sumfa[cur][j][k] += sumfa[cur][j-1][k];
                }
                if (k > 0) {
                    sumfb[cur][j][k] += sumfb[cur][j][k-1];
                }
                sumfa[cur][j][k] %= MOD;
                sumfb[cur][j][k] %= MOD;
            }
        }
    }
    ll res = 0;
    for (int j = 1; j <= sa; ++j) {
        for (int k = 1; k <= sb; ++k) {
            res += f[1-cur][j][k];
            res %= MOD;
        }
    }
    cout << res << endl;
    return 0;
}


/**************************************************************************************************************************************************************************************************/
PS- 
Calculate the remainder when p^(q!) is divided by r.

/* CODE O(q^2â‹…log(p)) */
class Solution{
    public static long solve(int p, int q, int r) {
        long result = 1; // Initialize result to 1
        for (int i = 1; i <= q; i++) {
            result = powM(p, result, r); // Calculate p^(current result) % r
        }
        return result;
    }

    // Function to compute (base^exponent) % mod using modular exponentiation
    public static long powM(int base, long exponent, int mod) {
        long result = 1;
        base = base % mod; // Update base if it is more than or equal to mod
        while (exponent > 0) {
            // If exponent is odd, multiply base with result
            if ((exponent % 2) == 1) {
                result = (result * base) % mod;
            }
            // exponent must be even now
            exponent = exponent >> 1; // Divide exponent by 2
            base = (base * base) % mod; // Square the base
        }
        return result;
    }
}

/************************************************************************************************************************************************************************************/
PS- https://thejoboverflow.com/p/p785/
Professor X has to solve the perennial problem of the budget for school picnic
Each student is identified by a unique Roll Number (r[i]) and a Unique Identification Number(a[i]). 
The total amount of the trip will be calculated as the sum of the cost of each of the rounds as long as there are at least two students remaining in the class. In a single round:

/* CODE */
long solution(int n, long[] arr, long[] roll) {
    long m = 1000000007;
    long ans = 0;
    // Validate the input sizes
    if (n > arr.length || n > roll.length) {
        throw new IllegalArgumentException("n cannot be greater than the size of arr or roll");
    }
    int min1Index = 0;
    int min2Index = 0;
    // Find both minimums in a single loop
    for (int i = 1; i < arr.length; i++) {
        if (arr[i] < arr[min1Index]) {
            min1Index = i;
        }
    }
    for (int i = 1; i < roll.length; i++) {
        if (roll[i] < roll[min2Index]) {
            min2Index = i;
        }
    }
    for (int i = 0; i < n; i++) {
        if (i == min1Index || i == min2Index) continue;
        ans += Math.min(arr[min1Index] * roll[i], roll[min2Index] * arr[i]);
        ans %= m;
    }
    if (min1Index != min2Index) {
        ans += (arr[min1Index] * roll[min2Index]) % m;
        ans %= m;
    }
    return ans;
}
